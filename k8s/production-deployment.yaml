apiVersion: apps/v1
kind: Deployment
metadata:
  name: asgard-data-products-api
  namespace: asgard
  labels:
    app: asgard-data-products-api
    version: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: asgard-data-products-api
  template:
    metadata:
      labels:
        app: asgard-data-products-api
        version: production
    spec:
      containers:
      - name: api
        image: python:3.11-slim
        ports:
        - containerPort: 8000
        env:
        - name: PYTHONPATH
          value: "/app"
        - name: TRINO_HOST
          value: "trino.data-platform.svc.cluster.local"
        - name: TRINO_PORT
          value: "8080"
        - name: ENVIRONMENT
          value: "production"
        envFrom:
        - secretRef:
            name: s3-credentials
        command: ["/bin/sh"]
        args:
          - -c
          - |
            cd /app && 
            pip install --no-cache-dir uv && 
            uv pip install --system fastapi==0.104.1 uvicorn[standard]==0.24.0 httpx==0.25.2 pydantic>=1.10,<2.0 aiofiles==23.2.1 &&
            python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: app-code
        configMap:
          name: asgard-app-code
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: asgard-data-products-api
  namespace: asgard
  labels:
    app: asgard-data-products-api
spec:
  selector:
    app: asgard-data-products-api
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: asgard-data-products-api
  namespace: asgard
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: data-products-api.asgard.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: asgard-data-products-api
            port:
              number: 8000